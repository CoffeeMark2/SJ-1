/* 2152988 杨恺铭 计科 */

/* 函数实现部分，{ }内的东西可以任意调整，目前的return 0只是一个示例，可改变 */

/* 不允许定义任何形式的外部全局、静态全局、宏定义、只读变量 */

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char str[])
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int cnt = 0;
	while (str[cnt] != '\0') {
		cnt++;
	}
	return cnt; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcat(char s1[], const char s2[])
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int i = 0, j = 0;
	while (s1[i] != '\0') {
		i++;
	}
	while (s2[j] != '\0') {
		s1[i++] = s2[j++];
	}
	s1[i] = '\0';
	return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncat(char s1[], const char s2[], const int len)
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int i = 0, j = 0;
	while (s1[i] != '\0') {
		i++;
	}
	for (; j < len && s2[j] != '\0';) {
		s1[i++] = s2[j++];

	}
	s1[i] = '\0';

	return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcpy(char s1[], const char s2[])
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int i = 0;
	while (s2[i] != '\0') {
		s1[i] = s2[i];
		i++;
	}
	s1[i] = '\0';
	return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncpy(char s1[], const char s2[], const int len)
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int i = 0;
	while (s2[i] != '\0' && i < len) {
		s1[i] = s2[i];
		i++;
	}
	return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char s1[], const char s2[])
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int i = 0;
	while (s1[i] == s2[i] && s1[i] != '\0') {
		i++;
	}
	return s1[i] - s2[i]; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：若不同则统一转为小写处理
***************************************************************************/
int tj_strcasecmp(const char s1[], const char s2[])
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int i = 0;
	for (; s1[i] != '\0'; i++) {
		if (s1[i] != s2[i]) {
			char c1 = s1[i], c2 = s2[i];
			if (c1 >= 'A' && c1 <= 'Z') {
				c1 += 'a' - 'A';
			}
			if (c2 >= 'A' && c2 <= 'Z') {
				c2 += 'a' - 'A';
			}
			if (c1 == c2) {
				continue;
			}
			return c1 - c2;

			break;
		}
	}

	return s1[i] - s2[i]; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char s1[], const char s2[], const int len)
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int i = 0;
	while (s1[i] == s2[i] && s1[i] != '\0' ) {
		i++;
		if (i >= len) {
			return 0;
		}
	}
	//wrong
	return s1[i] - s2[i]; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char s1[], const char s2[], const int len)
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int i = 0;
	for (; s1[i] != '\0' && i < len; i++) {
		if (s1[i] != s2[i]) {
			char c1 = s1[i], c2 = s2[i];
			if (c1 >= 'A' && c1 <= 'Z') {
				c1 += 'a' - 'A';
			}
			if (c2 >= 'A' && c2 <= 'Z') {
				c2 += 'a' - 'A';
			}
			if (c1 == c2) {
				continue;
			}
			return c1 - c2;

			break;
		}
	}
	if (i == len)
		return 0;
	return s1[i] - s2[i]; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strupr(char str[])
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int i = 0;
	while (str[i]) {
		if (str[i] >= 'a' && str[i] <= 'z') {
			str[i] -= 'a' - 'A';
		}
		i++;
	}
	return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlwr(char str[])
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int i = 0;
	while (str[i]) {
		if (str[i] >= 'A' && str[i] <= 'Z') {
			str[i] += 'a' - 'A';
		}
		i++;
	}

	return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char str[], char ch)
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int i = 0;
	for (; str[i]; i++) {
		if (str[i] == ch)
			return i + 1;
	}
	return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：如何判断前len(str)位+的str是否相等? 都要退出，但退出后指针位置不同
***************************************************************************/
int tj_strstr(const char str[], const char substr[])
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int i = 0;
	while (str[i]) {
		int j = 0;
		while (substr[j]) {
			if (str[i] != substr[j]) {
				break;
			}
			j++;
			i++;
		}
		if (substr[j] == 0) {
			return i - tj_strlen(substr) + 1;
		}
		i++;
	}
	//错啦，眼睛怎么长的
	return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char str[], const char ch)
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int len = tj_strlen(str);
	for (int i = len - 1; i >= 0; i--) {
		if (str[i] == ch) {
			return i + 1;
		}
	}
	return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char str[], const char substr[])
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	for (int k = tj_strlen(str) - 1; k >= 0; k--) {
		int i = k;
		int j = 0;
		while (substr[j]) {
			if (str[i] != substr[j]) {
				break;
			}
			j++;
			i++;
		}
		if (substr[j] == 0) {
			return i - tj_strlen(substr) + 1;
		}
	}

	return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrev(char str[])
{
	/* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
	int rear = tj_strlen(str) - 1, front = 0;
	for (; front < rear; front++, rear--) {
		char tmp = str[front];
		str[front] = str[rear];
		str[rear] = tmp;
	}

	return 0; //return值可根据需要修改
}