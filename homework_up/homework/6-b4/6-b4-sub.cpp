/* 2152988 杨恺铭 计科 */

#include <cstdio>   //NULL
//不再允许包含任何系统头文件

/* ----- 不允许定义任何形式的全局变量/全部数组/只读全局变量/宏定义!!!!! ----- */

/* 函数实现部分，{ }内的东西可以任意调整，目前的return只是一个示例，可改变 */
/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值： 
  说    明：
***************************************************************************/
int tj_strlen(const char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL) {
        return 0;
    }
    int cnt = 0;
    while (*str) {
        cnt++;
        str++;
    }
    return cnt;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strcat(char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2==NULL) {
        return s1;
    }
    char* p1 = s1;
    const char* p2 = s2;
    while (*p1) {
        ++p1;
    }
    while (*p2) {

        *p1++ = *p2++;
    }
    *p1 = 0;
    return s1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strncat(char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL) {
        return s1;
    }
    char* p1 = s1;
    const char* p2 = s2;
    while (*p1) {
        ++p1;
    }
    while (*p2&& p2 - s2 <len) {
        *p1++ = *p2++;
    }
    *p1 = 0;
    return s1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strcpy(char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */

    if (s1 == NULL) {
        return s1;
    }
    if (s2 == NULL) {
        *s1 = 0;
        return s1;
    }
    char* p1 = s1;
    const char* p2 = s2;
    
    while (*p2) {
        *p1++ = *p2++;
    }
    *p1 = 0;
    return s1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strncpy(char *s1, const char *s2, const int len)
{
    if (s1 == NULL || s2 == NULL) {
        return s1;
    }

    char* p1 = s1;
    const char* p2 = s2;

    while (*p2&& p2-s2 < len) {
        *p1++ = *p2++;
    }
    return s1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL) {
        return (s1 != NULL) - (s2 != NULL);
    }
    while (*s1 == *s2 && *s1 != 0) {
        s1++;
        s2++;
    }

    return *s1-*s2;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL) {
        return (s1 != NULL) - (s2 != NULL);
    }

    for (; *s1 != '\0'; s1++,s2++) {
        if (*s1 != *s2) {
            char c1 = *s1, c2 = *s2;
            if (c1 >= 'A' && c1 <= 'Z') {
                c1 += 'a' - 'A';
            }
            if (c2 >= 'A' && c2 <= 'Z') {
                c2 += 'a' - 'A';
            }
            if (c1 == c2) {
                continue;
            }
            return c1 - c2;
        }
    }


    return *s1 - *s2;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL) {
        return (s1 != NULL) - (s2 != NULL);
    }
    const char* p = s1;
    while (*s1 == *s2 && *s1 != 0 ) {
        s1++;
        s2++;
        if (s1 - p >= len) {
            //能走到这里说明之前比较全对
            return 0;
        }

    }

    return *s1 - *s2;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL) {
        return (s1 != NULL) - (s2 != NULL);
    }
    const char* p = s1;
    for (; *s1 != '\0'&& s1 - p < len; s1++, s2++) {
        if (*s1 != *s2) {
            char c1 = *s1, c2 = *s2;
            if (c1 >= 'A' && c1 <= 'Z') {
                c1 += 'a' - 'A';
            }
            if (c2 >= 'A' && c2 <= 'Z') {
                c2 += 'a' - 'A';
            }
            if (c1 == c2) {
                continue;
            }
            return c1 - c2;
        }
    }
    if (s1 - p >= len)
        return 0;

    return *s1 - *s2;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strupr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL) {
        return str;
    }
    char* p = str;
    while (*p) {
        if (*p >= 'a' && *p <= 'z') {
            (*p) -= 'a' - 'A';
        }
        p++;
    }
    return str;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strlwr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (!str) {
        return str;
    }
    char* p = str;
    while (*p) {
        if (*p >= 'A' && *p <= 'Z') {
            (*p) += 'a' - 'A';
        }
        p++;
    }
    return str;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL) {
        return 0;
    }
    const char* p = str;
    while (*str) {
        if (*str == ch)
            return str - p + 1;
        str++;
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char *str, const char *substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL || substr == NULL) {
        return 0;
    }
    const char* p = str; 
    while (*p) {
        const char* r = p;
        const char* q = substr;
        while (*q) {
            if (*r != *q) {
                break;
            }
            ++r;
            ++q;
        }
        if (!*q) {
            return p- str + 1;
        }
        ++p;
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL) {
        return 0;
    }
    int len = tj_strlen(str);
    const char* p = str + len - 1;
    while (len > 0) {
        if (*p == ch)
            return p - str + 1;
        p--;
        len--;
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char *str, const char *substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL || substr == NULL) {
        return 0;
    }
    int len = tj_strlen(str);
    const char* p = str + len - 1;

    while (len > 0) {
        const char* r = p;
        const char* q = substr;
        while (*q) {
            if (*r != *q) {
                break;
            }
            ++r;
            ++q;
        }
        if (!*q) {
            return p - str + 1;
        }
        --p;
        --len;
    }

    return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strrev(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL)
        return str;
    char* p = str, * q = str + tj_strlen(str) - 1;
    for (; p < q; p++, q--) {
        char tmp = *p;
        *p = *q;
        *q = tmp;
    }
    return str;
}
